{
	"name": "2_silver_transform_listings",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "82253f41-325a-429e-9ba4-97416ffd60c1"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/dc9c4ff8-158c-4aad-afb2-2ded35f739f6/resourceGroups/rg-primaryresourcegroup/providers/Microsoft.Synapse/workspaces/ws-primary/bigDataPools/sparkpool",
				"name": "sparkpool",
				"type": "Spark",
				"endpoint": "https://ws-primary.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Read files from realtor_lake.listings into a df"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# spark.conf.set(\"spark.storage.synapse.linkedServiceName\", \"ws-primary-WorkspaceDefaultStorage\")\r\n",
					"# spark.conf.set(\"fs.azure.account.oauth.provider.type\", \"com.microsoft.azure.synapse.tokenlibrary.LinkedServiceBasedTokenProvider\")\r\n",
					"# df = spark.read.csv('abfss://realtor@dlsprimarystorage.dfs.core.windows.net/raw')\r\n",
					"# df.show()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import functions as F\r\n",
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.types import *\r\n",
					"from delta.tables import DeltaTable\r\n",
					"import datetime"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"data_lake_container = \"abfss://realtor@dlsprimarystorage.dfs.core.windows.net\"\r\n",
					"silver_folder = 'silver'\r\n",
					"table_name = 'listings_silver'\r\n",
					"delta_table_path = data_lake_container + '/' + silver_folder + '/' + table_name\r\n",
					"\r\n",
					"key_columns_str = 'ListingId'\r\n",
					"# Convert comma separated string with keys to array\r\n",
					"key_columns = key_columns_str.split(',')\r\n",
					"\r\n",
					"# Convert array with keys to where-clause for merge statement\r\n",
					"conditions_list = [f\"existing.{key}=updates.{key}\" for key in key_columns]"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# raw_container = \"abfss://realtor@dlsprimarystorage.dfs.core.windows.net/raw\"\r\n",
					"# stage_container = \"abfss://realtor@dlsprimarystorage.dfs.core.windows.net/stage\"\r\n",
					"# listings_df = spark.read.parquet(raw_container + \"/*/*/*/*/\")\r\n",
					"# display(listings_df.limit(1))"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"listings_raw = spark.sql(\"SELECT * FROM realtor_lake.listings_bronze\")\r\n",
					"# display(listings_raw.limit(50))\r\n",
					"listings_raw.show()"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"##### Convert ListingInsertedDate string to long type and divide by 10 to obtain microseconds"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = listings_raw.withColumn(\"ListingInsertedMicroSecondsValue\",\r\n",
					"                                F.floor(listings_raw.ListingInsertedDateUTC.cast(LongType()) / 10)\r\n",
					"                                )\r\n",
					"# df.select(F.col(\"ListingInsertedMicroSecondsValue\")).show()"
				],
				"execution_count": 15
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Define UDF to convert the microseconds value to a date timestamp"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def microseconds_to_string(mseconds):\r\n",
					"        return datetime.datetime(1,1,1) + datetime.timedelta(microseconds= mseconds)\r\n",
					"\r\n",
					"var_f_time_conversion = F.udf(microseconds_to_string, TimestampType())\r\n",
					"\r\n",
					"# Test if successfully converted\r\n",
					"#df1 = df.withColumn(\"ListingInsertedTimestampUTC\",var_f_time_conversion(\"ListingInsertedMicroSecondsValue\"))\r\n",
					"# df1.select(F.col(\"ListingInsertedTimestampUTC\")).show()"
				],
				"execution_count": 16
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"###### Add new column ListingInsertedTimestampUTC, converted from LONG to timestamp (with UDF)\r\n",
					"###### Add new column ListingInsertedTimestampMT, timezone converted from UTC to MT\r\n",
					"###### Add new column PriceChangeDateTimeStampUTC, converted from STRING to timestamp\r\n",
					"###### Add new column PriceChangeDateTimeStampMT, timezone converted from UTC to MT"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sdf = df \\\r\n",
					"        .withColumn(\"ListingInsertedTimestampUTC\",var_f_time_conversion(\"ListingInsertedMicroSecondsValue\")) \\\r\n",
					"        .withColumn(\"ListingInsertedDateMT\", F.from_utc_timestamp(F.col(\"ListingInsertedTimestampUTC\"), \"America/Edmonton\")) \\\r\n",
					"        .withColumn(\"PriceChangeDateTimeStampUTC\", F.to_timestamp(F.col(\"PriceChangeDateUTC\"), \"yyyy-MM-dd h:mm:ss a\")) \\\r\n",
					"        .withColumn(\"PriceChangeDateMT\", F.from_utc_timestamp(F.col(\"PriceChangeDateTimeStampUTC\"), \"America/Edmonton\"))"
				],
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# df1.write.mode(\"overwrite\").partitionBy(\"year\", \"month\", \"day\").saveAsTable(\"realtor_lake.listings_silver\")"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Check if the Delta Table exists\r\n",
					"if (DeltaTable.isDeltaTable(spark, delta_table_path)):\r\n",
					"    print('Existing delta table')\r\n",
					"    # Read the existing Delta Table\r\n",
					"    delta_table = DeltaTable.forPath(spark, delta_table_path)\r\n",
					" \r\n",
					"    # Merge new data into existing table\r\n",
					"    delta_table.alias(\"existing\").merge(\r\n",
					"        source = sdf.alias(\"updates\"),\r\n",
					"        condition = \" AND \".join(conditions_list)\r\n",
					"         \r\n",
					"    ).whenMatchedUpdateAll(\r\n",
					"    ).whenNotMatchedInsertAll(\r\n",
					"    ).execute()\r\n",
					" \r\n",
					"    # For transactions you could do an append instead of a merge\r\n",
					"    # sdf.write.format('delta').mode('append').save(delta_table_path)\r\n",
					" \r\n",
					"else:\r\n",
					"    print('New delta table')\r\n",
					"    # Create new delta table with new data\r\n",
					"    sdf.write.format('delta').save(delta_table_path)"
				],
				"execution_count": 21
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM realtor_lake.listings_silver\r\n",
					"LIMIT 5"
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}